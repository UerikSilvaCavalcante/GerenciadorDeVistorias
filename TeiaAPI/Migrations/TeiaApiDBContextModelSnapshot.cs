// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TeiaAPI.Data;

#nullable disable

namespace TeiaAPI.Migrations
{
    [DbContext(typeof(TeiaApiDBContext))]
    partial class TeiaApiDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AcabamentoModelPinturaProps", b =>
                {
                    b.Property<int>("AcabamentosId")
                        .HasColumnType("integer");

                    b.Property<int>("PinturasId")
                        .HasColumnType("integer");

                    b.HasKey("AcabamentosId", "PinturasId");

                    b.HasIndex("PinturasId");

                    b.ToTable("pintura_acabamento", (string)null);
                });

            modelBuilder.Entity("AcabamentoModelPortasProps", b =>
                {
                    b.Property<int>("AcabamentosId")
                        .HasColumnType("integer");

                    b.Property<int>("PortasId")
                        .HasColumnType("integer");

                    b.HasKey("AcabamentosId", "PortasId");

                    b.HasIndex("PortasId");

                    b.ToTable("portas_acabamento", (string)null);
                });

            modelBuilder.Entity("AcabamentoModelRevestimentoProps", b =>
                {
                    b.Property<int>("AcabamentosId")
                        .HasColumnType("integer");

                    b.Property<int>("RevestimentosId")
                        .HasColumnType("integer");

                    b.HasKey("AcabamentosId", "RevestimentosId");

                    b.HasIndex("RevestimentosId");

                    b.ToTable("AcabamentoModelRevestimentoProps");
                });

            modelBuilder.Entity("AreaPropsImovelModel", b =>
                {
                    b.Property<int>("AreaImovelId")
                        .HasColumnType("integer");

                    b.Property<int>("ImoveisId")
                        .HasColumnType("integer");

                    b.HasKey("AreaImovelId", "ImoveisId");

                    b.HasIndex("ImoveisId");

                    b.ToTable("area_imovel", (string)null);
                });

            modelBuilder.Entity("AreaServicoPropsDivisaoModel", b =>
                {
                    b.Property<int>("AreaServicoId")
                        .HasColumnType("integer");

                    b.Property<int>("DivisoesId")
                        .HasColumnType("integer");

                    b.HasKey("AreaServicoId", "DivisoesId");

                    b.HasIndex("DivisoesId");

                    b.ToTable("area_servico_divisao", (string)null);
                });

            modelBuilder.Entity("BanheirosPropsDivisaoModel", b =>
                {
                    b.Property<int>("BanheirosId")
                        .HasColumnType("integer");

                    b.Property<int>("DivisoesId")
                        .HasColumnType("integer");

                    b.HasKey("BanheirosId", "DivisoesId");

                    b.HasIndex("DivisoesId");

                    b.ToTable("banheiros_divisao", (string)null);
                });

            modelBuilder.Entity("DivisaoModelGaragemProps", b =>
                {
                    b.Property<int>("DivisoesId")
                        .HasColumnType("integer");

                    b.Property<int>("GaragemsId")
                        .HasColumnType("integer");

                    b.HasKey("DivisoesId", "GaragemsId");

                    b.HasIndex("GaragemsId");

                    b.ToTable("garagem_divisao", (string)null);
                });

            modelBuilder.Entity("TeiaAPI.Models.AcabamentoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Bancada")
                        .HasColumnType("integer")
                        .HasColumnName("bancada");

                    b.Property<int>("EstadoConservacao")
                        .HasColumnType("integer")
                        .HasColumnName("estado_conservacao");

                    b.Property<int>("Janelas")
                        .HasColumnType("integer")
                        .HasColumnName("janelas");

                    b.Property<int>("Muro")
                        .HasColumnType("integer")
                        .HasColumnName("muro");

                    b.Property<int>("Padrao")
                        .HasColumnType("integer")
                        .HasColumnName("padrao");

                    b.Property<int>("Piso")
                        .HasColumnType("integer")
                        .HasColumnName("piso");

                    b.Property<int>("QuadroEletrico")
                        .HasColumnType("integer")
                        .HasColumnName("quadro_eletrico");

                    b.Property<int>("Teto")
                        .HasColumnType("integer")
                        .HasColumnName("teto");

                    b.HasKey("Id");

                    b.ToTable("acabamento");
                });

            modelBuilder.Entity("TeiaAPI.Models.ApartamentoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adminstradora")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("administradora");

                    b.Property<int>("Andar")
                        .HasColumnType("integer")
                        .HasColumnName("andar");

                    b.Property<int>("BlocoPredioId")
                        .HasColumnType("integer")
                        .HasColumnName("bloco_predio_id");

                    b.Property<float>("CondominioVal")
                        .HasColumnType("real")
                        .HasColumnName("condominio_val");

                    b.Property<string>("IdentificacaoPav")
                        .HasColumnType("text")
                        .HasColumnName("identificacao_pav");

                    b.Property<int>("Posicao_")
                        .HasColumnType("integer")
                        .HasColumnName("posicao");

                    b.Property<string>("Tel_Administradora")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tel_administradora");

                    b.Property<int>("Vista")
                        .HasColumnType("integer")
                        .HasColumnName("vista");

                    b.HasKey("Id");

                    b.HasIndex("BlocoPredioId")
                        .IsUnique();

                    b.ToTable("apartamento");
                });

            modelBuilder.Entity("TeiaAPI.Models.BlocoPredioModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AptosPorAndar")
                        .HasColumnType("integer")
                        .HasColumnName("aptos_por_andar");

                    b.Property<int>("Blocos")
                        .HasColumnType("integer")
                        .HasColumnName("blocos");

                    b.Property<int>("Elevadores")
                        .HasColumnType("integer")
                        .HasColumnName("elevadores");

                    b.Property<int>("Idade")
                        .HasColumnType("integer")
                        .HasColumnName("idade");

                    b.Property<string>("Outros")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("outros");

                    b.Property<int>("Pavimentos")
                        .HasColumnType("integer")
                        .HasColumnName("pavimentos");

                    b.Property<int>("Subsolos")
                        .HasColumnType("integer")
                        .HasColumnName("subsolos");

                    b.Property<int>("UnidadesPredio")
                        .HasColumnType("integer")
                        .HasColumnName("unidades_predio");

                    b.HasKey("Id");

                    b.ToTable("bloco_predio");
                });

            modelBuilder.Entity("TeiaAPI.Models.DivisaoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArCondicionado")
                        .HasColumnType("integer")
                        .HasColumnName("ar_condicionado");

                    b.Property<int>("Cozinhas")
                        .HasColumnType("integer")
                        .HasColumnName("cozinhas");

                    b.Property<int>("Lavabos")
                        .HasColumnType("integer")
                        .HasColumnName("lavabos");

                    b.Property<string>("Outros")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Outros");

                    b.Property<int>("Piscina")
                        .HasColumnType("integer")
                        .HasColumnName("piscina");

                    b.Property<int>("Quartos")
                        .HasColumnType("integer")
                        .HasColumnName("quartos");

                    b.Property<int>("SacadaVaranda")
                        .HasColumnType("integer")
                        .HasColumnName("sacada_varanda");

                    b.Property<int>("Salas")
                        .HasColumnType("integer")
                        .HasColumnName("salas");

                    b.HasKey("Id");

                    b.ToTable("divisao");
                });

            modelBuilder.Entity("TeiaAPI.Models.EnderecoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bairro");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cidade");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("complemento");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("estado");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("numero");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("rua");

                    b.Property<int>("TipoImovel")
                        .HasColumnType("integer")
                        .HasColumnName("tipoImovel");

                    b.HasKey("Id");

                    b.ToTable("endereco");
                });

            modelBuilder.Entity("TeiaAPI.Models.ImovelModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CotaGreide")
                        .HasColumnType("integer")
                        .HasColumnName("cota_greide");

                    b.Property<float>("Frente")
                        .HasColumnType("real")
                        .HasColumnName("Frente");

                    b.Property<int?>("IdAcabamento")
                        .HasColumnType("integer")
                        .HasColumnName("id_acabamento");

                    b.Property<int?>("IdDivisao")
                        .HasColumnType("integer")
                        .HasColumnName("id_divisao");

                    b.Property<int?>("IdInfraestrura")
                        .HasColumnType("integer")
                        .HasColumnName("id_infraestrutura");

                    b.Property<int>("IdadeImovel")
                        .HasColumnType("integer")
                        .HasColumnName("idade_imovel");

                    b.Property<string>("Patologia")
                        .HasColumnType("text")
                        .HasColumnName("patologia");

                    b.Property<string>("PosicaoUnidade")
                        .HasColumnType("text")
                        .HasColumnName("posicao_unidade");

                    b.Property<int>("Situacao")
                        .HasColumnType("integer")
                        .HasColumnName("situacao");

                    b.Property<int?>("Telhado")
                        .HasColumnType("integer");

                    b.Property<int>("TipoDoImovel")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_do_imovel");

                    b.Property<float>("ValorImovel")
                        .HasColumnType("real")
                        .HasColumnName("valor_imovel");

                    b.HasKey("Id");

                    b.HasIndex("IdAcabamento")
                        .IsUnique();

                    b.HasIndex("IdDivisao")
                        .IsUnique();

                    b.HasIndex("IdInfraestrura")
                        .IsUnique();

                    b.ToTable("imovel");
                });

            modelBuilder.Entity("TeiaAPI.Models.InfraestruturaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Fossa")
                        .HasColumnType("boolean")
                        .HasColumnName("fossa");

                    b.Property<bool>("Iluminacao")
                        .HasColumnType("boolean")
                        .HasColumnName("iluminacao");

                    b.Property<bool>("Pavimentacao")
                        .HasColumnType("boolean")
                        .HasColumnName("pavimentacao");

                    b.Property<bool>("RedeAguaP")
                        .HasColumnType("boolean")
                        .HasColumnName("rede_agua");

                    b.Property<bool>("RedeEsgoto")
                        .HasColumnType("boolean")
                        .HasColumnName("rede_esgoto");

                    b.Property<bool>("Sumidouro")
                        .HasColumnType("boolean")
                        .HasColumnName("sumidouro");

                    b.HasKey("Id");

                    b.ToTable("infraestrutura");
                });

            modelBuilder.Entity("TeiaAPI.Models.LoteModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Acabamento")
                        .HasColumnType("integer")
                        .HasColumnName("acabamento");

                    b.Property<double>("AreaTerreno")
                        .HasColumnType("double precision")
                        .HasColumnName("area_terreno");

                    b.Property<string>("Densidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("densidade");

                    b.Property<string>("FechamentoTerreno")
                        .HasColumnType("text")
                        .HasColumnName("fechamento_terreno");

                    b.Property<int>("Formato")
                        .HasColumnType("integer")
                        .HasColumnName("formato");

                    b.Property<double>("Frente")
                        .HasColumnType("double precision")
                        .HasColumnName("frente");

                    b.Property<string>("LocalizacaoUnidade")
                        .HasColumnType("text")
                        .HasColumnName("localizacao_unidade");

                    b.Property<int>("Situacao")
                        .HasColumnType("integer")
                        .HasColumnName("situacao");

                    b.Property<int>("SolucoesId")
                        .HasColumnType("integer")
                        .HasColumnName("solucoes_id");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.Property<int>("Topografia")
                        .HasColumnType("integer")
                        .HasColumnName("topografia");

                    b.Property<bool>("TransportePublico")
                        .HasColumnType("boolean")
                        .HasColumnName("transporte_publico");

                    b.Property<int>("UsoPredio")
                        .HasColumnType("integer")
                        .HasColumnName("uso_predio");

                    b.HasKey("Id");

                    b.HasIndex("SolucoesId");

                    b.ToTable("lote");
                });

            modelBuilder.Entity("TeiaAPI.Models.ObraModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Acabamentos")
                        .HasColumnType("real")
                        .HasColumnName("acabamentos");

                    b.Property<float>("Cobertura")
                        .HasColumnType("real")
                        .HasColumnName("cobertura");

                    b.Property<float>("Complementos")
                        .HasColumnType("real")
                        .HasColumnName("complementos");

                    b.Property<float>("Esquadrias")
                        .HasColumnType("real")
                        .HasColumnName("esquadrias");

                    b.Property<float>("Forros")
                        .HasColumnType("real")
                        .HasColumnName("forros");

                    b.Property<float>("Impermeabilizacao")
                        .HasColumnType("real")
                        .HasColumnName("impermeabilizacao");

                    b.Property<float>("Infraestrutura")
                        .HasColumnType("real")
                        .HasColumnName("infraestrutura");

                    b.Property<float>("InstalacoesEletricas")
                        .HasColumnType("real")
                        .HasColumnName("instalacoes_eletricas");

                    b.Property<float>("InstalacoesEsgoto")
                        .HasColumnType("real")
                        .HasColumnName("instalacoes_esgoto");

                    b.Property<float>("InstalacoesHidraulicas")
                        .HasColumnType("real")
                        .HasColumnName("instalacoes_hidraulicas");

                    b.Property<float>("LoucasMetais")
                        .HasColumnType("real")
                        .HasColumnName("locas_metais");

                    b.Property<string>("Outros")
                        .HasColumnType("text")
                        .HasColumnName("outros");

                    b.Property<float>("Paredes")
                        .HasColumnType("real")
                        .HasColumnName("paredes");

                    b.Property<float>("Pinturas")
                        .HasColumnType("real")
                        .HasColumnName("pintura");

                    b.Property<float>("Pisos")
                        .HasColumnType("real")
                        .HasColumnName("pisos");

                    b.Property<float>("RevestimentosExternos")
                        .HasColumnType("real")
                        .HasColumnName("revestimentos_externos");

                    b.Property<float>("RevestimentosInternos")
                        .HasColumnType("real")
                        .HasColumnName("revestimentos_internos");

                    b.Property<float>("Servico")
                        .HasColumnType("real")
                        .HasColumnName("servico");

                    b.Property<float>("SupraEstrutura")
                        .HasColumnType("real")
                        .HasColumnName("supra_estrutura");

                    b.Property<float>("VidrosPlasticos")
                        .HasColumnType("real")
                        .HasColumnName("vidros_plasticos");

                    b.HasKey("Id");

                    b.ToTable("obra");
                });

            modelBuilder.Entity("TeiaAPI.Models.Props.AreaProps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TipoArea")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.Property<float>("valor")
                        .HasColumnType("real")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.ToTable("area");
                });

            modelBuilder.Entity("TeiaAPI.Models.Props.AreaServicoProps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Qtde")
                        .HasColumnType("integer")
                        .HasColumnName("qtde");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("area_servico");
                });

            modelBuilder.Entity("TeiaAPI.Models.Props.BanheirosProps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Qtde")
                        .HasColumnType("integer")
                        .HasColumnName("qtde");

                    b.Property<int>("TipoBanheiro")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("banheiros");
                });

            modelBuilder.Entity("TeiaAPI.Models.Props.GaragemProps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Qtde")
                        .HasColumnType("integer")
                        .HasColumnName("qtde");

                    b.Property<int>("TipoGaragem")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("garagem");
                });

            modelBuilder.Entity("TeiaAPI.Models.Props.PinturaProps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Estilo")
                        .HasColumnType("integer")
                        .HasColumnName("estilo");

                    b.Property<int>("Qtde")
                        .HasColumnType("integer")
                        .HasColumnName("qtde");

                    b.Property<int>("TipoPintura")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("pintura");
                });

            modelBuilder.Entity("TeiaAPI.Models.Props.PortasProps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Loc")
                        .HasColumnType("integer")
                        .HasColumnName("loc");

                    b.Property<int>("Material")
                        .HasColumnType("integer")
                        .HasColumnName("material");

                    b.HasKey("Id");

                    b.ToTable("portas");
                });

            modelBuilder.Entity("TeiaAPI.Models.Props.RevestimentoProps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Local")
                        .HasColumnType("integer")
                        .HasColumnName("local");

                    b.Property<int>("TipoRevestimento")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("revestimento");
                });

            modelBuilder.Entity("TeiaAPI.Models.SolucoesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AbsGas")
                        .HasColumnType("integer")
                        .HasColumnName("abs_gas");

                    b.Property<int>("Agua")
                        .HasColumnType("integer")
                        .HasColumnName("agua");

                    b.Property<int>("AguasPluviais")
                        .HasColumnType("integer")
                        .HasColumnName("aguas_pluviais");

                    b.Property<int>("ColetaLixo")
                        .HasColumnType("integer")
                        .HasColumnName("coleta_lixo");

                    b.Property<int>("Comercio")
                        .HasColumnType("integer")
                        .HasColumnName("comercio");

                    b.Property<int>("Creche")
                        .HasColumnType("integer")
                        .HasColumnName("creche");

                    b.Property<int>("Energia")
                        .HasColumnType("integer")
                        .HasColumnName("energia");

                    b.Property<int>("Escola")
                        .HasColumnType("integer")
                        .HasColumnName("escola");

                    b.Property<int>("Esgoto")
                        .HasColumnType("integer")
                        .HasColumnName("esgoto");

                    b.Property<int>("GuiasSarjetas")
                        .HasColumnType("integer")
                        .HasColumnName("guias_sarjetas");

                    b.Property<int>("Iluminacao")
                        .HasColumnType("integer")
                        .HasColumnName("iluminacao");

                    b.Property<int>("Lazer")
                        .HasColumnType("integer")
                        .HasColumnName("lazer");

                    b.Property<int>("Pavimentacao")
                        .HasColumnType("integer")
                        .HasColumnName("pavimentacao");

                    b.Property<int>("Saude")
                        .HasColumnType("integer")
                        .HasColumnName("saude");

                    b.Property<int>("Seguranca")
                        .HasColumnType("integer")
                        .HasColumnName("seguranca");

                    b.HasKey("Id");

                    b.ToTable("solucoes");
                });

            modelBuilder.Entity("TeiaAPI.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int?>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TeiaAPI.Models.VistoriaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cliente");

                    b.Property<string>("Contratante")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contratante");

                    b.Property<DateTime>("DataAbertura")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Data_abertura");

                    b.Property<DateTime>("DataConclusao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_conclusao");

                    b.Property<DateTime?>("DataLancamento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_lancamento");

                    b.Property<int>("IdEndereco")
                        .HasColumnType("integer")
                        .HasColumnName("id_endereco");

                    b.Property<int>("IdEngenheiro")
                        .HasColumnType("integer")
                        .HasColumnName("id_engenheiro");

                    b.Property<int?>("IdImovel")
                        .HasColumnType("integer")
                        .HasColumnName("id_imovel");

                    b.Property<int?>("IdTipoImovel")
                        .HasColumnType("integer")
                        .HasColumnName("id_tipo_imover");

                    b.Property<int>("IdVistoriador")
                        .HasColumnType("integer")
                        .HasColumnName("id_vistoriador");

                    b.Property<string>("Latitude")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("longitude");

                    b.Property<long>("NumOs")
                        .HasColumnType("bigint")
                        .HasColumnName("num_os");

                    b.Property<string>("Obs")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("obs");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<string>("Tel_Contratante")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tel_contratante");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.Property<string>("URLImagens")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("url_imagens");

                    b.Property<string>("URLMatricula")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("url_matricula");

                    b.HasKey("Id");

                    b.HasIndex("IdEndereco")
                        .IsUnique();

                    b.HasIndex("IdEngenheiro");

                    b.HasIndex("IdImovel");

                    b.HasIndex("IdVistoriador");

                    b.ToTable("vistoria");
                });

            modelBuilder.Entity("AcabamentoModelPinturaProps", b =>
                {
                    b.HasOne("TeiaAPI.Models.AcabamentoModel", null)
                        .WithMany()
                        .HasForeignKey("AcabamentosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeiaAPI.Models.Props.PinturaProps", null)
                        .WithMany()
                        .HasForeignKey("PinturasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcabamentoModelPortasProps", b =>
                {
                    b.HasOne("TeiaAPI.Models.AcabamentoModel", null)
                        .WithMany()
                        .HasForeignKey("AcabamentosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeiaAPI.Models.Props.PortasProps", null)
                        .WithMany()
                        .HasForeignKey("PortasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcabamentoModelRevestimentoProps", b =>
                {
                    b.HasOne("TeiaAPI.Models.AcabamentoModel", null)
                        .WithMany()
                        .HasForeignKey("AcabamentosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeiaAPI.Models.Props.RevestimentoProps", null)
                        .WithMany()
                        .HasForeignKey("RevestimentosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AreaPropsImovelModel", b =>
                {
                    b.HasOne("TeiaAPI.Models.Props.AreaProps", null)
                        .WithMany()
                        .HasForeignKey("AreaImovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeiaAPI.Models.ImovelModel", null)
                        .WithMany()
                        .HasForeignKey("ImoveisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AreaServicoPropsDivisaoModel", b =>
                {
                    b.HasOne("TeiaAPI.Models.Props.AreaServicoProps", null)
                        .WithMany()
                        .HasForeignKey("AreaServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeiaAPI.Models.DivisaoModel", null)
                        .WithMany()
                        .HasForeignKey("DivisoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BanheirosPropsDivisaoModel", b =>
                {
                    b.HasOne("TeiaAPI.Models.Props.BanheirosProps", null)
                        .WithMany()
                        .HasForeignKey("BanheirosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeiaAPI.Models.DivisaoModel", null)
                        .WithMany()
                        .HasForeignKey("DivisoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DivisaoModelGaragemProps", b =>
                {
                    b.HasOne("TeiaAPI.Models.DivisaoModel", null)
                        .WithMany()
                        .HasForeignKey("DivisoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeiaAPI.Models.Props.GaragemProps", null)
                        .WithMany()
                        .HasForeignKey("GaragemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeiaAPI.Models.ApartamentoModel", b =>
                {
                    b.HasOne("TeiaAPI.Models.BlocoPredioModel", "BlocoPredio")
                        .WithOne()
                        .HasForeignKey("TeiaAPI.Models.ApartamentoModel", "BlocoPredioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlocoPredio");
                });

            modelBuilder.Entity("TeiaAPI.Models.ImovelModel", b =>
                {
                    b.HasOne("TeiaAPI.Models.AcabamentoModel", "Acabamento")
                        .WithOne()
                        .HasForeignKey("TeiaAPI.Models.ImovelModel", "IdAcabamento");

                    b.HasOne("TeiaAPI.Models.DivisaoModel", "Divisao")
                        .WithOne()
                        .HasForeignKey("TeiaAPI.Models.ImovelModel", "IdDivisao");

                    b.HasOne("TeiaAPI.Models.InfraestruturaModel", "Infraestrutura")
                        .WithOne()
                        .HasForeignKey("TeiaAPI.Models.ImovelModel", "IdInfraestrura");

                    b.Navigation("Acabamento");

                    b.Navigation("Divisao");

                    b.Navigation("Infraestrutura");
                });

            modelBuilder.Entity("TeiaAPI.Models.LoteModel", b =>
                {
                    b.HasOne("TeiaAPI.Models.SolucoesModel", "Solucoes")
                        .WithMany()
                        .HasForeignKey("SolucoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solucoes");
                });

            modelBuilder.Entity("TeiaAPI.Models.VistoriaModel", b =>
                {
                    b.HasOne("TeiaAPI.Models.EnderecoModel", "Endereco")
                        .WithOne()
                        .HasForeignKey("TeiaAPI.Models.VistoriaModel", "IdEndereco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeiaAPI.Models.UserModel", "Engenheiro")
                        .WithMany()
                        .HasForeignKey("IdEngenheiro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeiaAPI.Models.ImovelModel", "Imovel")
                        .WithMany()
                        .HasForeignKey("IdImovel");

                    b.HasOne("TeiaAPI.Models.UserModel", "Vistoriador")
                        .WithMany()
                        .HasForeignKey("IdVistoriador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");

                    b.Navigation("Engenheiro");

                    b.Navigation("Imovel");

                    b.Navigation("Vistoriador");
                });
#pragma warning restore 612, 618
        }
    }
}
